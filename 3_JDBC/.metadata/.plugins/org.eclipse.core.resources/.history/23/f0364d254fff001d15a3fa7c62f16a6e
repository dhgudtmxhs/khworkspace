package edu.kh.jdbc.member.view;

import java.util.List;
import java.util.Scanner;

import edu.kh.jdbc.member.model.service.MemberService;
import edu.kh.jdbc.member.model.vo.Member;

public class MemberView {

	private Scanner sc = new Scanner(System.in);
	
	// 회원 관련 서비스 제공 객체 생성 및 참조
	private MemberService service = new MemberService();
	
	/**
	 * 회원 가입 화면 출력용 메소드
	 */
	public void signUp() {
		
		System.out.println("[회원 가입]");
		
		try {
		
		String memberId = null;	
		String memberPw = null;
		String memberPw2 = null;	
		String memberName = null;
		char memberGender = ' ';
			
		while(true) { // 중복 아이디가 없을 경우 종료하는 if문 필요
		
		System.out.print("아이디 : ");
		memberId = sc.next();
		
		
		/* 아이디 중복 검사 (DB에 일치하는 아이디 있으면 "중복" -> 다시 아이디 입력 받기) */
		int result = service.duplicateCheck(memberId);
		// result는 중복이면 1, 아니면 0이 반환되어 넘어온다. // 2,3 없음
		
		if(result == 0) { // 중복 아니면 반복문 종료
			System.out.println("사용 가능한 아이디 입니다.");
			break;
		
		}else {
			System.out.println("이미 사용중인 아이디입니다. 다시 입력해주세요.");
		}
		
		} // 아이디 중복 검사 while문 종료
		
		// 비밀번호, 비밀번호 확인을 각각 입력받아
		// 일치할때 까지 무한 반복
		
		while(true) {
			System.out.print("비밀번호 : ");
			memberPw = sc.next();
			
			System.out.print("비밀번호 확인 : ");
			memberPw2 = sc.next();
			
			if(memberPw.equals(memberPw2)) {
				System.out.println("일치");
				break;
			}else {
				System.out.println("\n[비밀번호가 일치하지 않습니다. 다시 입력해주세요.]\n");
			}
		}// 비밀번호 확인 while문 종료
		
		System.out.print("회원 이름 : ");
		memberName = sc.next();
		
		// 성별이 'M' 또는 'F'가 입력될 때 까지 반복
		while(true) {
			
			System.out.print("성별(M/F) : ");
			memberGender = sc.next().toUpperCase().charAt(0); // String.toUpperCase() : 문자열을 대문자로 변환
			
			if(memberGender == 'M' || memberGender == 'F') {
				break;
			}else {
				System.out.println("\n['M' 또는 'F'로만 입력해주세요.]\n");
			}
		} // 성별 while문 종료
		
		// 입력 받은 값을 하나의 객체(Member)에 저장하기
	
		Member signUpMember = new Member(memberId, memberPw, memberName, memberGender);
		
		// 회원 가입 Service 호출 후 결과 반환 받기
		// - 회원 가입 == DB에 회원 정보 삽입 == INSERT(DML)
		// -> DML 구문 수행 시 성공한 행의 개수가 반환된다 == int형 변수로 결과를 저장한다.
		int result = service.signUp(signUpMember);
		
		// Service 결과에 따른 화면 처리
		if(result > 0 ) { // 가입 성공 시
			System.out.println("\n *** 회원 가입 성공 ***\n");
		}else {
			System.out.println("[회원 가입 실패]");
		}
		
		}catch(Exception e) {
			System.out.println("\n<회원 가입중 예외 발생>\n");
			e.printStackTrace(); // 예외 내용 출력
		}
		
		
	}

	/** 로그인 메소드
	 * @return
	 */
	public Member login() {

		System.out.println("[로그인]");
		
		System.out.print("아이디 : ");
		String memberId = sc.next();

		System.out.print("비밀번호 : ");
		String memberPw = sc.next();
		
		// Member 객체를 생성하여 입력 받은 값 세팅
		Member mem = new Member();
		mem.setMemberId(memberId);
		mem.setMemberPw(memberPw); // Setter를 이용한 초기화. 2개짜리 매개변수 생성자 만들어도 됨
		
		// 로그인 Service 수행 후 결과 반환 받기
		Member loginMember = null;
		
		try {
			loginMember = service.login(mem);
			
			if(loginMember != null) { // 참조하는 객체가 있다 == 로그인 성공
				System.out.println("\n***" +loginMember.getMemberNm() + "님 환영합니다. ***\n");
			}else { // 로그인 실패 탈퇴한 회원도 포함
				System.out.println("\n[아이디 또는 비밀번호가 일치하지 않습니다.]");
				
			}
			
		} catch (Exception e) {
			System.out.println("\n<로그인 과정에서 예외 발생>\n");
			e.printStackTrace();
		}
		
		return loginMember;
	}

	/**
	 * 내 정보 조회 
	 * @param loginMember
	 */
	public void myInfo(Member loginMember) {
	
		System.out.println("[내 정보 조회]");
		
		System.out.println("회원 정보 : " + loginMember.getMemberNo());
		System.out.println("아이디 : " + loginMember.getMemberId() );
		
		System.out.println("이름 : " + loginMember.getMemberNm());
		/*
		if(loginMember.getMemberGender() == 'M') {
			System.out.println("성별 : 남성");
		}else {
			System.out.println("성별 : 여성");
		}
		*/
		
		
		System.out.println("성별 : " +( loginMember.getMemberGender() == 'M'? "남성" : "여성" ));
		System.out.println("가입일 : " + loginMember.getEnrollDate());
		
		
	}

	public void selectAll() {
		
		System.out.println("[가입된 회원 목록 조회]");
		
		// DB에서 회원 정보 모두 조회(아이디, 이름, 가입일)
		// 단, 탈퇴 회원 제외, 아이디 오름 차순 조회
		
		// 회원 정보 조회 Service 호출 후 결과 반환 받기
		try {
			List<Member> memberList = service.selectAll();
			
			if(memberList.isEmpty()) {
				System.out.println("조회 결과가 없습니다");
			}else {
				for(Member m : memberList) {
					System.out.printf("%12s %12s	%s\n", m.getMemberId(), m.getMemberNm(), m.getEnrollDate().toString());
				}
				
				
			}
			
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}

	
	/**
	 * 내 정보 수정
	 * @param loginMember
	 */
	public void updateMyInfo(Member loginMember) {
		
	System.out.println("[내 정보 수정(이름, 성별)");	
		
	System.out.print("변경할 이름 : ");
	String memberName = sc.next();
	
	System.out.print("변경할 성별(M/F) : ");
	char memberGender = sc.next().toUpperCase().charAt(0);
	
	// 입력 받은 값 + 로그인한 회원 번호 하나의 Member 객체에 저장
	// (로그인한 회원 번호 == 어떤 회원 정보를 수정할지 지정)
	Member updateMember = new Member();
	
	updateMember.setMemberNm(memberName);
	updateMember.setMemberGender(memberGender);

	updateMember.setMemberNo(loginMember.getMemberNo());
	

	
	// 수정 성공시 + 수정한 값으로 로그인멤버 바꾸기

	try {
		
		int result = service.updateMyInfo(updateMember);
	
		if(result > 0) {
			System.out.println("\n[회원 정보가 수정되었습니다.]\n");
			
			// DB의 수정된 내용과 현재 로그인한 회원 정보를 일치 시켰다.(자바에선 로그인멤버가 바뀌지 않았음)
			// 얕은 복사 : 참조 주소만 복사하여 같은 객체를 참조
			// -> 특징 : 복사된 주소를 참조하여 수정하면 원본 객체가 수정된다.
			
			loginMember.setMemberNm(memberName);
			loginMember.setMemberGender(memberGender);
			
		}else { // 수정 실패
			System.out.println("\n[회원 정보 수정에 실패 하였습니다.]\n");
		}
	
	
	}catch(Exception e) {
		System.out.println("\n 내정보 수정 중 예외 발생");
		e.printStackTrace();
	}
	}

	/** 비밀번호 변경
	 * @param loginMember
	 */
	public void updatePw(Member loginMember) {
		
		System.out.println("[비밀번호 변경]");
		
		// 현재 비밀번호 --> DB Update 조건(WHERE)
		System.out.print("현재 비밀번호 : ");
		String currentPw = sc.next();
		
		String newPw = null;
		String newPw2 = null;
		
		while(true) {
		
		// 새 비밀번호
		System.out.print("새 비밀번호 : ");
		newPw = sc.next();
		
		System.out.print("새 비밀번호 확인 : ");
		newPw2 = sc.next();
		
		if(newPw.equals(newPw2)) {
			System.out.println("새 비밀번호 일치");
			break;
		}else {
			System.out.println("새 비밀번호가 일치하지 않습니다. 다시 입력해주세요.");
		}	
		
		}
		try {
			int result = service.updatePw(loginMember.getMemberNo(), currentPw, newPw);
		
			if(result > 0) {
				System.out.println("비밀번호가 변경되었습니다.");
				loginMember.setMemberPw(newPw);
			}else {
				System.out.println("비밀번호 변경에 실패했습니다.");
			}
		
		
		}catch(Exception e) {
			System.out.println("비밀번호 변경 과정 중 오류 발생");
			e.printStackTrace();
		}
		
	} 
	
}
