package edu.kh.jdbc.board.model.dao;

import java.io.FileInputStream;
import java.sql.Connection;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;

import java.sql.Date;
import java.util.List;
import java.util.Properties;
import static edu.kh.jdbc.common.JDBCTemplate.*;
import edu.kh.jdbc.board.model.vo.Board;
import edu.kh.jdbc.board.model.vo.Reply;

public class BoardDAO {

	// JDBC 객체 참조용 변수 선언
	private Statement stmt;
	private PreparedStatement pstmt;
	private ResultSet rs;
	
	// SQL 내용을 저장할 Properties 객체 참조 변수 선언
	private Properties prop;
	
	// 기본 생성자(board-sql.xml 파일 읽어오기(Properties))
	public BoardDAO() {
		
		try {
			
			prop = new Properties();
			
			// xml 파일 읽어오기
			prop.loadFromXML(new FileInputStream("board-sql.xml")); // entry들의 key, value 얻어오기
			
			
			
		}catch(Exception e) {
			e.printStackTrace();
		}
		
		
	}
	
	
	/** 게시글 목록 조회 DAO
	 * @param conn
	 * @return BoardList
	 * @throws Exception
	 */
	public List<Board> selectAll(Connection conn) throws Exception {

		List<Board> boardList = new ArrayList<Board>();
		
		try {
			// 1) SQL 작성
			String sql = prop.getProperty("selectAll");
			
			// smtm 객체 생성
			stmt = conn.createStatement();
			
			// sql 결과 반환받기
			rs = stmt.executeQuery(sql);
			
			
			while(rs.next()) {
				
			int boardNo = rs.getInt("BOARD_NO");	
			String boardTitle = rs.getString("BOARD_TITLE");		
			Date createDate = rs.getDate("CREATE_DATE");	
			int readCount = rs.getInt("READ_COUNT");	
			String memberName = rs.getString("MEMBER_NM");
			int replyCount = rs.getInt("REPLY_COUNT");	
			
			// 객체 생성해 값 담기
			Board board = new Board(boardNo, boardTitle, createDate, readCount, memberName, replyCount);
			
			// 객체를 list에 추가
			boardList.add(board);
			
			}
			
		}finally {
			
			// JDBC 자원 반환(Connection 제외)
			close(rs);
			close(stmt);
			
		}
		
		return boardList;
	}


	/** 특정 게시글 상세 조회 DAO
	 * @param conn
	 * @param boardNo
	 * @return board
	 * @throws Exception
	 */
	public Board selectOne(Connection conn, int boardNo) throws Exception{

		Board board = null; // 결과 저장용 변수
		try {
			// 1) SQL 작성
			String sql = prop.getProperty("selectOne");
			// 2) PreparedStatement 생성
			pstmt = conn.prepareStatement(sql);
			// 3) 위치 홀더 '?' 알맞은 값 세팅
			pstmt.setInt(1, boardNo);
			// 4) SQl 수행(SELECT) 후 결과 반환 받기 (ResultSet)
			rs = pstmt.executeQuery();
			// 5) 조회된 한 행 (있을경우) 조회된 컬럼 값 얻어오기
			if(rs.next()){
				
				//int boardNo1 = rs.getInt("BOARD_NO");	
				// --> 입력받은 boardNo와 조회된 "BOARD_NO" 는 같으므로
				// 굳이 db 조회 결과에서 얻어오지 않아도 된다. 변수명 바꾸면 되긴 하는듯
				
				String boardTitle = rs.getString("BOARD_TITLE");		
				Date createDate = rs.getDate("CREATE_DATE");	
				int readCount = rs.getInt("READ_COUNT");	
				String memberName = rs.getString("MEMBER_NM");
				
				String boardContent = rs.getString("BOARD_CONTENT"); 
				int memberNo = rs.getInt("MEMBER_NO");
				
			
				
				//6 board 객체 사용해 컬럼 값 세팅
				board = new Board();
				
				board.setBoardNo(boardNo);
				board.setBoardTitle(boardTitle);
				board.setBoardContent(boardContent);
				board.setCreateDate(createDate);
				board.setReadCount(readCount);
				board.setMemberName(memberName); // 순서 상관??
				board.setMemberNo(memberNo);
			
			}
			
		}finally {
			
			// 7) 사용한 jdbc 자원 반환
			close(rs);
			close(pstmt);
		}
		return board;
}

	/** 특정 게시글 댓글 목록 조회 DAO
	 * @param conn
	 * @param boardNo
	 * @return replyList
	 * @throws Exception
	 */
	public List<Reply> selectReplyList(Connection conn, int boardNo) throws Exception{
		
		List<Reply> replyList = new ArrayList<Reply>(); // 결과 저장용 변수
		
		try {
			// 1) SQL 작성
			String sql = prop.getProperty("selectReplyList");
			
			// 2) PreparedStatement 생성
			pstmt = conn.prepareStatement(sql);
			
			// 3) 위치홀더에 알맞은 값 대입
			pstmt.setInt(1, boardNo);
			
			// 4) SQL(SELECT) 수행 후 결과(ResultSet) 반환 받기
			rs = pstmt.executeQuery();
			
			// 5) 조회된 결과를 한 행씩 접근(while문)
			// -> 각 행 별로 컬럼값 얻어오기
			while(rs.next()) {
				
				int replyNo = rs.getInt("REPLY_NO");
				String replyContent = rs.getString("REPLY_CONTENT");
				Date createDate = rs.getDate("CREATE_DATE");
				int memberNo = rs.getInt("MEMBER_NO");
				//int boardNo1 = rs.getInt("BOARD_NO);
				String memberName = rs.getString("MEMBER_NM");
				
				// 6) Reply 객체를 생성하여 컬럼 값 담기
				Reply reply = new Reply(replyNo, replyContent, createDate, memberNo, memberName, boardNo);
				
				// 7) replyList에 Reply 객체 추가
				replyList.add(reply);
	
			}
			
		}finally {
			// 8) JDBC 객체 자원 반환	
			close(rs);
			close(pstmt);
			
		}
		// 결과 반환
		return replyList;
	}


	/** 게시글 조회수 증가 DAO
	 * @param conn
	 * @param boardNo
	 * @return result
	 * @throws Exception
	 */
	public int increaseReadCount(Connection conn, int boardNo) throws Exception{
		
		int result = 0; // 결과 저장용 변수
		
		try {

			String sql = prop.getProperty("increaseReadCount");
			
			pstmt = conn.prepareStatement(sql);
			
			pstmt.setInt(1, boardNo);
			
			result = pstmt.executeUpdate();
			
		}finally {
			close(pstmt);
		}
		return result;
	}


	public int deleteBoard(Connection conn, int boardNo) throws Exception{
		
		int result1 = 0;
		int result2 = 0;
		try {
			
			String sql = prop.getProperty("deleteReply");
			
			pstmt = conn.prepareStatement(sql);
			
			pstmt.setInt(1, boardNo);
			
			result1 = pstmt.executeUpdate();
			
			System.out.println(result1);
			
			String sql2 = prop.getProperty("deleteBoard");
			
			pstmt = conn.prepareStatement(sql2);
			
			pstmt.setInt(1, boardNo);
			
			result2 = (pstmt.executeUpdate() + result1);
			
		}finally {
			
			close(pstmt);
			
		}
		System.out.println(result2);
		return result2;
	}


	public int updateBoard(Connection conn, Board board) throws Exception{
	
		int result = 0;
		
		try {
		
		String sql = prop.getProperty("updateBoard");
		
		pstmt = conn.prepareStatement(sql);
		
		pstmt.setString(1, board.getBoardTitle());
		pstmt.setString(2, board.getBoardContent());
		pstmt.setInt(3, board.getBoardNo());
		
		result = pstmt.executeUpdate();
		
		}finally {
			
			close(pstmt);
		}
		
		return result;
	}


	public int insertReply(Connection conn, Reply reply) throws Exception {
		
		int result = 0;
		
		try {
			
			String sql = prop.getProperty('insertReply');	
			
			pstmt = conn.prepareStatement(sql);
			
			pstmt.setString(1, reply.getReplyContent());
			pstmt.setInt(2, reply.getMemberNo());
			pstmt.setInt(3, reply.getBoardNo());
		
			
			
		}finally {
			
		}
		
		
		
		
		
	}

}



