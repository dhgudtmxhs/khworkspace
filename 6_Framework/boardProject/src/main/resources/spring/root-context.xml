<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- 다른 모든 웹 구성 요소에 표시되는 공유 리소스 정의 -->

	<!-- 프로젝트 전반적으로 사용할 DB 연결 관련 내용(JDBC, MyBatis, DBCP), AOP, 트랜잭션 처리, 파일 업로드 
		등을 작성 -->

	<!-- DBCP 사용을 위한 DataSource를 Bean으로 등록 -->
	<!-- DataSource란? : java에서 Connection Pool을 지원하기 위한 인터페이스 -->
	<!-- BasicDataSource : DataSource인터페이스를 구현한 클래스, 아파치 commons.dbcp에서 제공 -->
	<!-- destroy-method="close" : 주어진 세션을 자동으로 반환(close)하라는 설정 -->
	<bean id="dataSource"
		class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close">

		<property name="driverClassName"
			value="oracle.jdbc.driver.OracleDriver" />
		<property name="url"
			value="jdbc:oracle:thin:@localhost:1521:xe" />
		<property name="username" value="project" />
		<property name="password" value="project1234" />

		<!-- defaultAutoCommit: SQL 수행 후 자동 COMMIT 설정. (기본값 : true) -->
		<property name="defaultAutoCommit" value="false" />

		<!-- 커넥션 풀 설정 -->
		<property name="initialSize" value="10" /> <!-- 초기 커넥션 수, 기본 0 -->
		<property name="maxTotal" value="500" /> <!-- 최대 커넥션 수, 기본 8 -->
		<property name="maxIdle" value="100" /> <!-- 유휴 상태로 존재할 수 있는 커넥션 최대 수, 기본 8 -->
		<property name="minIdle" value="10" /> <!-- 유휴 상태로 존재할 수 있는 커넥션 최소 수, 기본 0 -->
		<property name="maxWaitMillis" value="-1" /> <!-- 예외 발생 전 커넥션이 반환 될 떄 까지 대기하는 최대 시간(ms), 기본 -1(무기한) -->
											<!-- 컴퓨터 처리 장치에서 유휴 또는 아이들(idle)은 어떠한 프로그램에 의해서도 사용되지 않는 상태를 말한다. -->
		
		<!-- 
			 커넥션 풀은 데이터베이스와의 연결을 관리하기 위한 기술입니다. 
			 일반적으로 웹 애플리케이션에서는 동시에 여러 클라이언트에서 데이터베이스에 접근해야 하기 때문에, 
			 각각의 클라이언트에서 매번 데이터베이스와의 연결을 생성하는 것은 비효율적입니다. 
			 
			 이를 개선하기 위해 커넥션 풀을 사용합니다. 커넥션 풀은 미리 설정된 일정 개수의 연결을 생성하고, 
			 클라이언트에서 데이터베이스 연결을 필요로 할 때 해당 연결을 제공합니다. 
			 이미 생성된 연결을 재활용하여 실행 속도를 향상시키고, 동시에 많은 사용자가 접속할 때도 안정적인 연결을 제공합니다.
			 
			 만약 클라이언트가 단 한 명뿐이고 동시에 데이터베이스 접속이 필요하지 않은 경우에는 커넥션 풀은 필요하지 않을 수 있습니다. 
			 하지만 대부분의 웹 애플리케이션은 여러 클라이언트가 동시에 접속하고 데이터베이스에 접근해야 하는 상황에서 사용되므로, 커넥션 풀은 매우 유용한 기술입니다. 
			 커넥션 풀은 데이터베이스 연결의 생성과 해제 비용을 줄이고, 성능을 향상시킬 수 있습니다. 따라서 일반적으로 웹 애플리케이션에서는 커넥션 풀을 사용하는 것이 좋습니다.
		-->
		

		
	</bean>

		<!-- SqlSession : sql구문을 DB에 전달, 실행하는 객체 
		 SqlSessionFactory : SqlSession을 만드는 객체 
		 sqlSessionFactoryBean : mybatis 설정 파일(mybatis-config.xml)과 Connection Pool 정보를 이용하여 SqlSessionFactory를 만드는 객체 
		 sqlSessionTemplate : SqlSession 객체에 트랜잭션 처리 역할이 가능하도록 하는 객체 -->
	
	<!-- 마이바티스 SqlSession 등록하기 (xml 방식으로 bean 등록) -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		
		<!-- mybatis-config.xml 설정 불러오기 -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="dataSource" ref="dataSource" />
		
	</bean>
	
	<!-- SqlSessionTemplate : 기본 SQL 실행 + 트랜잭션 관리 역할을 하는 SqlSession을 생성할 수 있게 하는 객체(Spring bean으로 등록해야함.) -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactoryBean" />
	</bean>
	
	<!-- 스프링에서 사용하는 proxy를 이용한 트랜잭션 제어가 안될 경우 추가적인 트랜잭션 매니저를 추가해서 문제 해결 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	



</beans>
