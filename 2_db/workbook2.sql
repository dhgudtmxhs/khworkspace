SELECT * FROM TB_DEPARTMENT;
SELECT * FROM TB_STUDENT;
SELECT * FROM TB_CLASS;
SELECT * FROM TB_CLASS_PROFESSOR;
SELECT * FROM TB_PROFESSOR;
SELECT * FROM TB_GRADE;

--1
SELECT STUDENT_NO, STUDENT_NAME, ENTRANCE_DATE 
FROM TB_STUDENT
WHERE DEPARTMENT_NO = 002
ORDER BY 3;

--2
SELECT PROFESSOR_NAME, PROFESSOR_SSN 
FROM TB_PROFESSOR
WHERE PROFESSOR_NAME NOT LIKE '___'; 

--3
--FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE(SUBSTR(EMP_NO, 1, 6), 'RRMMDD') ) / 12) AS 만나이2
SELECT PROFESSOR_NAME 교수이름, FLOOR(MONTHS_BETWEEN
                                    (SYSDATE, 
                                     TO_DATE(19||SUBSTR(PROFESSOR_SSN, 1, 6) ) ) -- 2000년대 이상이 없음
                                     / 12) AS 만나이
FROM TB_PROFESSOR
WHERE SUBSTR(PROFESSOR_SSN, 8,1) = '1'
ORDER BY 2 ;

SELECT PROFESSOR_NAME 교수이름, FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE(19||SUBSTR(PROFESSOR_SSN, 1,6),'YYYYMMDD')) / 12) "만 나이"
FROM TB_PROFESSOR
WHERE SUBSTR(PROFESSOR_SSN, 8,1) = 1
ORDER BY 2;



--4
SELECT SUBSTR(PROFESSOR_NAME, 2,3) 이름
FROM TB_PROFESSOR;

--5
/*
SELECT STUDENT_NO, STUDENT_NAME 
FROM TB_STUDENT
WHERE EXTRACT(YEAR FROM ENTRANCE_DATE)
(SUBSTR(EXTRACT(YEAR FROM ENTRANCE_DATE),3,2) + 100) - SUBSTR(STUDENT_SSN, 1,2) ) > 19; 
SELECT * FROM TB_STUDENT; -- 1990년대생을 고려하지 않음
*/

SELECT STUDENT_NO, STUDENT_NAME
FROM TB_STUDENT
WHERE (EXTRACT(YEAR FROM EMTRANCE_DATE)) - (TO_DATE(SUBSTR(STUDENT_SSN, 1,2)) >= 20; 

SELECT STUDENT_NO, STUDENT_NAME
FROM TB_STUDENT
WHERE EXTRACT(YEAR FROM ENTRANCE_DATE) - EXTRACT(YEAR FROM TO_DATE(SUBSTR(STUDENT_SSN, 1,2),'RRRR')) >=20; -- YY로하면 2050부터 다 >=20이라 엄청많은사람들나옴

SELECT STUDENT_NO, STUDENT_NAME
FROM TB_STUDENT
WHERE EXTRACT(YEAR FROM ENTRANCE_DATE) - EXTRACT(YEAR FROM TO_DATE(19||SUBSTR(STUDENT_SSN, 1,6),'YYYYMMDD')) > 19; -- 00년생 이상이 없음.
SELECT * FROM TB_STUDENT;
--6
SELECT TO_CHAR(TO_DATE('2020-12-25'),'DAY') FROM DUAL; -- 금요일

--7
-- YY = 현재 년도의 세기 21 ->2000년대
-- RR = 과거 년도의 세기 20 ->1900년대
-- RR은 50년을 기준으로 50이상이면 1900년대, 50 미만이면 2000년대를 나타냄

SELECT TO_CHAR(TO_DATE('99/10/11', 'YY/MM/DD'), 'YYYY') FROM DUAL; -- 2099
SELECT TO_CHAR(TO_DATE('49/10/11', 'YY/MM/DD'), 'YYYY') FROM DUAL; -- 2049
SELECT TO_CHAR(TO_DATE('99/10/11', 'RR/MM/DD'), 'RRRR') FROM DUAL; -- 1999
SELECT TO_CHAR(TO_DATE('49/10/11', 'RR/MM/DD'), 'RRRR') FROM DUAL; -- 2049


--8
SELECT STUDENT_NO, STUDENT_NAME 
FROM TB_STUDENT
WHERE EXTRACT(YEAR FROM ENTRANCE_DATE) < 2000;

--9
SELECT ROUND(AVG(POINT), 1) AS 평점 
FROM TB_GRADE
WHERE STUDENT_NO = 'A517178';

--10
SELECT DEPARTMENT_NO 학과번호, COUNT(*) "학생수(명)"
FROM TB_STUDENT
GROUP BY DEPARTMENT_NO
ORDER BY 1;



--11
SELECT COUNT(*) FROM TB_STUDENT
WHERE COACH_PROFESSOR_NO IS NULL;

--12
/*
200401	A112113	C5009300	4
200303	A112113	C3087400	4
200302	A112113	C5009300	4.5
200101	A112113	C4477600	2.5
200202	A112113	C4139300	2.5
200201	A112113	C4139300	2
200102	A112113	C3087400	3
*/
SELECT SUBSTR(TERM_NO,1,4) 년도, ROUND(AVG(POINT),1) "년도별 평점"
FROM TB_GRADE
WHERE STUDENT_NO = 'A112113' 
GROUP BY SUBSTR(TERM_NO,1,4)
ORDER BY 1;
--SUBSTR(TERM_NO,1,4) 년도, ROUND(AVG(POINT),1) 를 하면 년도 행이 203개인데 AVG는 1나만 나옴 그래서 GROUP BY로 묶음

SELECT * FROM TB_GRADE;

--13
SELECT DEPARTMENT_NO 학과코드명, SUM(
    CASE
        WHEN ABSENCE_YN = 'Y' THEN 1
        ELSE 0
        END
) "휴학생 수"
FROM TB_STUDENT
GROUP BY  DEPARTMENT_NO
ORDER BY 1;

SELECT DEPARTMENT_NO, COUNT(DECODE(ABSENCE_YN, 'Y', 'Y', 'YES'/*없는테이블?값?을 넣어버림 -> 반환해주는 값이 없어짐*/, 0)) 휴학생수
-- Y든 N이든 다 카운트가 되어버림 0도 카운트임.
--COUNT(컬럼명) -> NULL이 아닐 때 카운트함. COUNT(함수식) -> 함수의 결과가 있을 때(이것도 NULL이 아닐때 카운트랑 같은 의미)
FROM TB_STUDENT
GROUP BY DEPARTMENT_NO
ORDER BY 1;

SELECT DEPARTMENT_NO, SUM(DECODE(ABSENCE_YN, 'Y', 1, 0/* 'Y' 아니라면 0을한다*/)) "휴학생 수"
FROM TB_STUDENT
GROUP BY DEPARTMENT_NO
ORDER BY 1;


--14
--동명이인
SELECT STUDENT_NAME 동명이인, COUNT(*) "동명인 수"
FROM TB_STUDENT 
GROUP BY STUDENT_NAME
HAVING COUNT(*) >= 2
ORDER BY 1;

--15
SELECT SUBSTR(TERM_NO,1,4) 년도, SUBSTR(TERM_NO,5,2)학기, ROUND(AVG(POINT, 1)) 평점
FROM TB_GRADE
WHERE STUDENT_NO = 'A112113'
GROUP BY ROLLUP ( SUBSTR(TERM_NO, 1, 4), SUBSTR(TERM_NO, 5, 2) )
ORDER BY 1;



-- ROLLUP 함수 : 그룹 별로 중간 집계 처리를 하는 함수
-- 그룹 별로 묶여진 값에 대한 '중간 집계'와 '총 집계'를 계산하여 자동으로 추가하는 함수
-- * 인자로 전달받은 그룹중에서 가장 먼저 지정한 그룹별 합계와 총 합계를 구하는 함수





SELECT * FROM TB_DEPARTMENT;
SELECT * FROM TB_STUDENT;
SELECT * FROM TB_CLASS;
SELECT * FROM TB_CLASS_PROFESSOR;
SELECT * FROM TB_PROFESSOR;
SELECT * FROM TB_GRADE;
------------------------------------------------------------------------------
SELECT DEPARTMENT_NO, COUNT(*) FROM TB_STUDENT GROUP BY DEPARTMENT_NO ORDER BY 1;

SELECT SUBSTR(TERM_NO,1,4), ROUND(AVG(POINT),1) 
FROM TB_GRADE
WHERE STUDENT_NO = 'A112113'
GROUP BY SUBSTR(TERM_NO,1,4)
ORDER BY 1;

SELECT DEPARTMENT_NO, NVL(COUNT(*), 0)
FROM TB_STUDENT
WHERE ABSENCE_YN = 'Y'
GROUP BY DEPARTMENT_NO
ORDER BY 1;

SELECT DEPARTMENT_NO, SUM(
    CASE
        WHEN ABSENCE_YN = 'Y' THEN 1
        ELSE 0
        END
)
FROM TB_STUDENT
GROUP BY DEPARTMENT_NO
ORDER BY 1;

SELECT STUDENT_NAME, COUNT(*)
FROM TB_STUDENT
GROUP BY STUDENT_NAME
HAVING COUNT(*) >=2;


